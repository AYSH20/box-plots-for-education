{
    "contents" : "rm(list = ls(all = TRUE))\nsource(\"fn.base.R\")\ngc()\n\n#Just Load all\n#################################################################################################\ntrain <- read.csv('input/TrainingData.csv'  )\ntest <- read.csv('input/TestData.csv'  )\nsub <- read.csv('input/SubmissionFormat.csv'  )\n\nlabels <- c(  \"Function\",\"Object_Type\",\"Operating_Status\",\"Position_Type\",\"Pre_K\",\"Reporting\",\"Sharing\",\"Student_Type\",\"Use\"  )\ntarget    <- train[ , labels]\ntargetRAW <- train[ , labels]\nfn.save.data(\"targetRAW\")\n\ntrain <- train[ , which( !(colnames(train) %in% labels))   ]\ntest <- test[ ,colnames(train) ]\n\n#Make lower case, remove punctuation, remove word end letter(s, r, ing, ed)\nfor( i in c(2:9,11:13,15:17)  ){\n  print(i)\n  train[[i]] <- as.character(train[[i]])\n  test[[i]] <- as.character(test[[i]])\n  p <- c( train[[i]],test[[i]] )     \n  p <- tolower(p)\n  p[is.na(p)] <- paste0(\"empty\")\n  p[p==\"\"] <- paste0(\"none\")\n  p <- gsub(\"&\",\" \",p) \n  p <- gsub('\\\\(',\" \",p) \n  p <- gsub(\"\\\\)\",\" \",p) \n  p <- gsub(\"-\",\" \",p) \n  p <- gsub(\",\",\" \",p) \n  p <- gsub(\"\\\\/\",\" \",p) \n  p <- gsub(\"\\\\*\", \" \", p)\n  p <- gsub(\"\\\\'\", \" \", p)\n  p <- gsub(\"\\\"\", \" \", p)\n  p <- gsub(\"\\\\:\", \" \", p)\n  p <- gsub(\"  \", \" \", p)\n  p <- gsub(\"  \", \" \", p)\n  \n  p <- rmws(p)\n  p <- rmfs(p)\n  p <- rmfr(p)\n  p <- rmfing(p)\n  p <- rmfed(p)\n  train[[i]] <- p[1:nrow(train)]\n  test[[i]] <- p[(nrow(train)+1):length(p)  ]\n}\ngc()\ntable(target$Function)\ntrain[ is.na(train)  ] <- -999\ntest[ is.na(test)  ] <- -999\nsna(train)\nsna(test)\ngc()\nfn.save.data(\"train\")\nfn.save.data(\"test\")\nfn.save.data(\"sub\")\n###################################################################################\n\n\n#For each text, extract the first, second and third word and build new features with that words\n###################################################################################\nfor( feat in 2:17  ){ \n  print(feat)\n  if( is.character(train[[feat]]) ){\n    f1 <- matrix( \"none\" , nrow=nrow(train),ncol=3 )\n    p <- lapply( train[[feat]] , strsplit,\" \"  )\n    i=2\n    for( i in 1:length(p)  ){\n      t <- p[[i]]\n      t <- t[[1]]\n      l <- length(t)\n      if( l==1 ){\n        f1[i,1] <- t[1]\n      }else if(l==2){\n        f1[i,1] <- t[1]\n        f1[i,2] <- t[2]\n      }else if(l>2 ){\n        f1[i,1] <- t[1]\n        f1[i,2] <- t[2]\n        f1[i,3] <- t[3]\n      }\n    }\n    f1 <- data.frame( f1 )\n    colnames(f1) <- paste0(\"F\",feat,\"_\",1:3 )\n    train <- cbind( train,f1 )\n    \n    f1 <- matrix( \"none\" , nrow=nrow(test),ncol=3 )\n    p <- lapply( test[[feat]] , strsplit,\" \"  )\n    i=2\n    for( i in 1:length(p)  ){\n      t <- p[[i]]\n      t <- t[[1]]\n      l <- length(t)\n      if( l==1 ){\n        f1[i,1] <- t[1]\n      }else if(l==2){\n        f1[i,1] <- t[1]\n        f1[i,2] <- t[2]\n      }else if(l>2 ){\n        f1[i,1] <- t[1]\n        f1[i,2] <- t[2]\n        f1[i,3] <- t[3]\n      }\n    }\n    f1 <- data.frame( f1 )\n    colnames(f1) <- paste0(\"F\",feat,\"_\",1:3 )\n    test <- cbind( test,f1 )\n  }\n  gc()\n}\n###################################################################################\n\n\n# Now convert TEXTs to indices, feature by feature\n###################################################################################\nfor( i in 1:ncol(train)  ){\n  if( is.character(train[[i]])  ){\n    print(i)\n    p <- as.numeric( factor( c(train[[i]],test[[i]])  )  )\n    train[[i]] <- p[1:nrow(train)]\n    test[[i]] <- p[(nrow(train)+1):length(p)]\n    gc()\n  }  \n}\ntrain$X <- NULL # remove ids\ntest$X <- NULL\nrm(f1,feat,i,l,p,t)\ngc()\n###################################################################################\n\n\n#Create numeric target matrix\n###################################################################################\ncols1 <- substr(colnames(sub)[2:38],11,1000)\ncols2 <- substr(colnames(sub)[39:49],14,1000)\ncols3 <- substr(colnames(sub)[50:52],19,1000)\ncols4 <- substr(colnames(sub)[53:77],16,1000)\ncols5 <- substr(colnames(sub)[78:80],8,1000)\ncols6 <- substr(colnames(sub)[81:83],12,1000)\ncols7 <- substr(colnames(sub)[84:88],10,1000)\ncols8 <- substr(colnames(sub)[89:97],15,1000)\ncols9 <- substr(colnames(sub)[98:105],6,1000)\nfor( i in 1:9  ){\n  print(i)\n  p <- as.character(target[[i]])\n  p <- gsub(\" \",\".\",p) \n  p <- gsub(\"&\",\".\",p) \n  p <- gsub('\\\\(',\".\",p) \n  p <- gsub(\"\\\\)\",\".\",p) \n  p <- gsub(\"-\",\".\",p) \n  p <- gsub(\",\",\".\",p) \n  p <- gsub(\"\\\\/\",\".\",p) \n  target[[i]] <- p\n}\n\ndt <- data.table( name=cols1 , pos=1:length(cols1), key=\"name\" )\nsetkeyv(dt,\"name\")\ntarget$Function <- dt[ J(target$Function) ]$pos\n\ndt <- data.table( name=cols2 , pos=1:length(cols2), key=\"name\" )\nsetkeyv(dt,\"name\")\ntarget$Object_Type <- dt[ J(target$Object_Type) ]$pos\n\ndt <- data.table( name=cols3 , pos=1:length(cols3), key=\"name\" )\nsetkeyv(dt,\"name\")\ntarget$Operating_Status <- dt[ J(target$Operating_Status) ]$pos\n\ndt <- data.table( name=cols4 , pos=1:length(cols4), key=\"name\" )\nsetkeyv(dt,\"name\")\ntarget$Position_Type <- dt[ J(target$Position_Type) ]$pos\n\ndt <- data.table( name=cols5 , pos=1:length(cols5), key=\"name\" )\nsetkeyv(dt,\"name\")\ntarget$Pre_K <- dt[ J(target$Pre_K) ]$pos\n\ndt <- data.table( name=cols6 , pos=1:length(cols6), key=\"name\" )\nsetkeyv(dt,\"name\")\ntarget$Reporting <- dt[ J(target$Reporting) ]$pos\n\ndt <- data.table( name=cols7 , pos=1:length(cols7), key=\"name\" )\nsetkeyv(dt,\"name\")\ntarget$Sharing <- dt[ J(target$Sharing) ]$pos\n\ndt <- data.table( name=cols8 , pos=1:length(cols8), key=\"name\" )\nsetkeyv(dt,\"name\")\ntarget$Student_Type <- dt[ J(target$Student_Type) ]$pos\n\ndt <- data.table( name=cols9 , pos=1:length(cols9), key=\"name\" )\nsetkeyv(dt,\"name\")\ntarget$Use <- dt[ J(target$Use) ]$pos\n\nfn.save.data(\"target\")\nsna(target)\ngc()\n###################################################################################\n\n\n\n#Build binary target matrix for each target\n###################################################################################\nMTARGET <- list()\ntg=1\nTARGET <- matrix( 0 ,nrow=nrow(train) , ncol=length(unique(target[[tg]])) )\nfor( i in 1:nrow(target)){\n  TARGET[ i , target[[tg]][i]  ] <- 1\n}\nMTARGET[[tg]] <- TARGET\n\ntg=2\nTARGET <- matrix( 0 ,nrow=nrow(train) , ncol=length(unique(target[[tg]])) )\nfor( i in 1:nrow(target)){\n  TARGET[ i , target[[tg]][i]  ] <- 1\n}\nMTARGET[[tg]] <- TARGET\n\ntg=3\nTARGET <- matrix( 0 ,nrow=nrow(train) , ncol=length(unique(target[[tg]])) )\nfor( i in 1:nrow(target)){\n  TARGET[ i , target[[tg]][i]  ] <- 1\n}\nMTARGET[[tg]] <- TARGET\n\ntg=4\nTARGET <- matrix( 0 ,nrow=nrow(train) , ncol=length(unique(target[[tg]])) )\nfor( i in 1:nrow(target)){\n  TARGET[ i , target[[tg]][i]  ] <- 1\n}\nMTARGET[[tg]] <- TARGET\n\ntg=5\nTARGET <- matrix( 0 ,nrow=nrow(train) , ncol=length(unique(target[[tg]])) )\nfor( i in 1:nrow(target)){\n  TARGET[ i , target[[tg]][i]  ] <- 1\n}\nMTARGET[[tg]] <- TARGET\n\ntg=6\nTARGET <- matrix( 0 ,nrow=nrow(train) , ncol=length(unique(target[[tg]])) )\nfor( i in 1:nrow(target)){\n  TARGET[ i , target[[tg]][i]  ] <- 1\n}\nMTARGET[[tg]] <- TARGET\n\ntg=7\nTARGET <- matrix( 0 ,nrow=nrow(train) , ncol=length(unique(target[[tg]])) )\nfor( i in 1:nrow(target)){\n  TARGET[ i , target[[tg]][i]  ] <- 1\n}\nMTARGET[[tg]] <- TARGET\n\ntg=8\nTARGET <- matrix( 0 ,nrow=nrow(train) , ncol=length(unique(target[[tg]])) )\nfor( i in 1:nrow(target)){\n  TARGET[ i , target[[tg]][i]  ] <- 1\n}\nMTARGET[[tg]] <- TARGET\n\ntg=9\nTARGET <- matrix( 0 ,nrow=nrow(train) , ncol=length(unique(target[[tg]])) )\nfor( i in 1:nrow(target)){\n  TARGET[ i , target[[tg]][i]  ] <- 1\n}\nMTARGET[[tg]] <- TARGET\nfn.save.data(\"MTARGET\")\n###################################################################################\n\n\n\n\n\n#Train all 9 targets using 15 fold CV\n###################################################################################\nfn.load.data(\"target\")\nfn.load.data(\"MTARGET\")\ncv <- rep( 1:15, nrow(train)  ) # 15 fold CV\ncv <- cv[1:nrow(train)]\n\ntg <- 5\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.5D <- xgbCV( train[,c(2,3,5,6,9,11:13,16:58)] , test[,c(2,3,5,6,9,11:13,16:58)] , tgt, MTGT, cv , ite=250 ,shri=0.10, depth=8,subsample=0.50,colsample=0.25, verbose=TRUE )\nfn.save.data(\"pred.xg.5D\")\nnllmc(MTARGET[[5]],pred.xg.5D$train)\n\ntg <- 3\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.3D <- xgbCV( train[,c(2,3,5,6,9,11:13,16:58)] , test[,c(2,3,5,6,9,11:13,16:58)] , tgt, MTGT, cv , ite=250 ,shri=0.10, depth=8,subsample=0.50,colsample=0.25, verbose=TRUE )\nfn.save.data(\"pred.xg.3D\")\nnllmc(MTARGET[[3]],pred.xg.3D$train)\n\ntg <- 6\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.6D <- xgbCV( train[,c(2,3,5,6,9,11:13,16:58)] , test[,c(2,3,5,6,9,11:13,16:58)] , tgt, MTGT, cv , ite=250 ,shri=0.10, depth=8,subsample=0.50,colsample=0.25, verbose=TRUE )\nfn.save.data(\"pred.xg.6D\")\nnllmc(MTARGET[[6]],pred.xg.6D$train)\n\ntg <- 7\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.7D <- xgbCV( train[,c(2,3,5,6,9,11:13,16:58)] , test[,c(2,3,5,6,9,11:13,16:58)] , tgt, MTGT, cv , ite=250 ,shri=0.10, depth=8,subsample=0.50,colsample=0.25, verbose=TRUE )\nfn.save.data(\"pred.xg.7D\")\nnllmc(MTARGET[[7]],pred.xg.7D$train)\n\ntg <- 9\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.9D <- xgbCV( train[,c(2,3,5,6,9,11:13,16:58)] , test[,c(2,3,5,6,9,11:13,16:58)] , tgt, MTGT, cv , ite=250 ,shri=0.10, depth=8,subsample=0.50,colsample=0.25, verbose=TRUE )\nfn.save.data(\"pred.xg.9D\")\nnllmc(MTARGET[[9]],pred.xg.9D$train)\n\ntg <- 8\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.8D <- xgbCV( train[,c(2,3,5,6,9,11:13,16:58)] , test[,c(2,3,5,6,9,11:13,16:58)] , tgt, MTGT, cv , ite=250 ,shri=0.10, depth=8,subsample=0.50,colsample=0.25, verbose=TRUE )\nfn.save.data(\"pred.xg.8D\")\nnllmc(MTARGET[[8]],pred.xg.8D$train)\n\ntg <- 2\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.2D <- xgbCV( train[,c(2,3,5,6,9,11:13,16:58)] , test[,c(2,3,5,6,9,11:13,16:58)] , tgt, MTGT, cv , ite=250 ,shri=0.10, depth=8,subsample=0.50,colsample=0.25, verbose=TRUE )\nfn.save.data(\"pred.xg.2D\")\nnllmc(MTARGET[[2]],pred.xg.2D$train)\n\ntg <- 4\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.4D <- xgbCV( train[,c(2,3,5,6,9,11:13,16:58)] , test[,c(2,3,5,6,9,11:13,16:58)] , tgt, MTGT, cv , ite=250 ,shri=0.10, depth=8,subsample=0.50,colsample=0.25, verbose=TRUE )\nfn.save.data(\"pred.xg.4D\")\nnllmc(MTARGET[[4]],pred.xg.4D$train)\n\ntg <- 1\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.1D <- xgbCV( train[,c(2,3,5,6,9,11:13,16:58)] , test[,c(2,3,5,6,9,11:13,16:58)] , tgt, MTGT, cv , ite=250 ,shri=0.10, depth=8,subsample=0.50,colsample=0.25, verbose=TRUE )\nfn.save.data(\"pred.xg.1D\")\nnllmc(MTARGET[[1]],pred.xg.1D$train)\n###########################################################################################\n\n\n\n\n#Calculate the metric for all targets separatedly and then calculate main score\n###########################################################################################\nfn.load.data(\"target\")\nfn.load.data(\"MTARGET\")\nfn.load.data(\"pred.xg.1D\")\nfn.load.data(\"pred.xg.2D\")\nfn.load.data(\"pred.xg.3D\")\nfn.load.data(\"pred.xg.4D\")\nfn.load.data(\"pred.xg.5D\")\nfn.load.data(\"pred.xg.6D\")\nfn.load.data(\"pred.xg.7D\")\nfn.load.data(\"pred.xg.8D\")\nfn.load.data(\"pred.xg.9D\")\n\n#Score for each target\nnllmc(MTARGET[[1]],pred.xg.1D$train)#0.10137\nnllmc(MTARGET[[2]],pred.xg.2D$train)#0.03018705\nnllmc(MTARGET[[3]],pred.xg.3D$train)#0.02853979\nnllmc(MTARGET[[4]],pred.xg.4D$train)#0.03723378\nnllmc(MTARGET[[5]],pred.xg.5D$train)#0.01737533\nnllmc(MTARGET[[6]],pred.xg.6D$train)#0.04242992\nnllmc(MTARGET[[7]],pred.xg.7D$train)#0.06398903\nnllmc(MTARGET[[8]],pred.xg.8D$train)#0.04378052\nnllmc(MTARGET[[9]],pred.xg.9D$train)#0.07619743\n\n#Main Score 0.4411\nllmc(MTARGET[[1]],pred.xg.1D$train)+\n  llmc(MTARGET[[2]],pred.xg.2D$train)+\n  llmc(MTARGET[[3]],pred.xg.3D$train)+\n  llmc(MTARGET[[4]],pred.xg.4D$train)+\n  llmc(MTARGET[[5]],pred.xg.5D$train)+\n  llmc(MTARGET[[6]],pred.xg.6D$train)+\n  llmc(MTARGET[[7]],pred.xg.7D$train)+\n  llmc(MTARGET[[8]],pred.xg.8D$train)+\n  llmc(MTARGET[[9]],pred.xg.9D$train)\n\n\n#Hit rate for each target\nmean( max.col(pred.xg.1D$train)==target[[1]]  )#0.9695261\nmean( max.col(pred.xg.2D$train)==target[[2]]  )#0.9914184\nmean( max.col(pred.xg.3D$train)==target[[3]]  )#0.9916908\nmean( max.col(pred.xg.4D$train)==target[[4]]  )#0.9903642\nmean( max.col(pred.xg.5D$train)==target[[5]]  )#0.9950334\nmean( max.col(pred.xg.6D$train)==target[[6]]  )#0.9878984\nmean( max.col(pred.xg.7D$train)==target[[7]]  )#0.9818226\nmean( max.col(pred.xg.8D$train)==target[[8]]  )#0.9886004\nmean( max.col(pred.xg.9D$train)==target[[9]]  )#0.9780352\n\n##############################################################################################\n\n\n\n\n\n\n\n\n",
    "created" : 1422549347203.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "645451760",
    "id" : "EECD528F",
    "lastKnownWriteTime" : 1422551120,
    "path" : "F:/Kaggle/boxplots/Doc/code/train1.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}