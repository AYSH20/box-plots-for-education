{
    "contents" : "rm(list = ls(all = TRUE))\nsource(\"fn.base.R\")\ngc()\n\nfn.load.data(\"train\")\nfn.load.data(\"test\")\n\n#For each text, extract the first, second and last word and build new features with that words\n###################################################################################\nfor( feat in 2:17  ){\n  print(feat)\n  if( is.character(train[[feat]]) ){\n    f1 <- matrix( \"none\" , nrow=nrow(train),ncol=3 )\n    p <- lapply( train[[feat]] , strsplit,\" \"  )\n    i=2\n    for( i in 1:length(p)  ){\n      t <- p[[i]]\n      t <- t[[1]]\n      l <- length(t)\n      if( l==1 ){\n        f1[i,1:3] <- t[1]\n      }else if(l==2){\n        f1[i,1:2] <- t[1]\n        f1[i,3] <- t[2]\n      }else if(l>2 ){\n        f1[i,1] <- t[1]\n        f1[i,2] <- t[2]\n        f1[i,3] <- t[l]\n      }\n    }\n    f1 <- data.frame( f1 )\n    colnames(f1) <- paste0(\"F\",feat,\"_\",1:3 )\n    train <- cbind( train,f1 )\n    \n    f1 <- matrix( \"none\" , nrow=nrow(test),ncol=3 )\n    p <- lapply( test[[feat]] , strsplit,\" \"  )\n    i=2\n    for( i in 1:length(p)  ){\n      t <- p[[i]]\n      t <- t[[1]]\n      l <- length(t)\n      if( l==1 ){\n        f1[i,1:3] <- t[1]\n      }else if(l==2){\n        f1[i,1:2] <- t[1]\n        f1[i,3] <- t[2]\n      }else if(l>2 ){\n        f1[i,1] <- t[1]\n        f1[i,2] <- t[2]\n        f1[i,3] <- t[l]\n      }\n    }\n    f1 <- data.frame( f1 )\n    colnames(f1) <- paste0(\"F\",feat,\"_\",1:3 )\n    test <- cbind( test,f1 )\n  }\n  gc()\n}\n###################################################################################\n\n\n# Now convert TEXTs to indices, feature by feature\n###################################################################################\nfor( i in 1:ncol(train)  ){\n  if( is.character(train[[i]])  ){\n    print(i)\n    p <- as.numeric( factor( c(train[[i]],test[[i]])  )  )\n    train[[i]] <- p[1:nrow(train)]\n    test[[i]] <- p[(nrow(train)+1):length(p)]\n    gc()\n  }  \n}\ntrain$X <- NULL # remove ids\ntest$X <- NULL\nrm(f1,feat,i,l,p,t)\ngc()\n###################################################################################\n\n\n#Train all 9 targets using 15 fold CV\n###################################################################################\nfn.load.data(\"target\")\nfn.load.data(\"MTARGET\")\ncv <- rep( 1:15, nrow(train)  ) # 15 fold CV\ncv <- cv[1:nrow(train)]\n\ntg <- 1\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\n# train <- train[ , c(7:13,16:48)]\npred.xg.1 <- xgbCV( train , test , tgt, MTGT, cv , ite=300 ,shri=0.11, depth=7,subsample=0.35,colsample=0.30, verbose=TRUE )\nfn.save.data(\"pred.xg.1\")\n\ntg <- 5\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.5 <- xgbCV( train , test , tgt, MTGT, cv , ite=300 ,shri=0.11, depth=7,subsample=0.35,colsample=0.30, verbose=TRUE )\nfn.save.data(\"pred.xg.5\")\n\ntg <- 3\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.3 <- xgbCV( train , test , tgt, MTGT, cv , ite=300 ,shri=0.11, depth=7,subsample=0.35,colsample=0.30, verbose=TRUE )\nfn.save.data(\"pred.xg.3\")\n\ntg <- 6\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.6 <- xgbCV( train , test , tgt, MTGT, cv , ite=300 ,shri=0.11, depth=7,subsample=0.35,colsample=0.30, verbose=TRUE )\nfn.save.data(\"pred.xg.6\")\n\ntg <- 7\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.7 <- xgbCV( train , test , tgt, MTGT, cv , ite=300 ,shri=0.11, depth=7,subsample=0.35,colsample=0.30, verbose=TRUE )\nfn.save.data(\"pred.xg.7\")\n\ntg <- 9\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.9 <- xgbCV( train , test , tgt, MTGT, cv , ite=300 ,shri=0.11, depth=7,subsample=0.35,colsample=0.30, verbose=TRUE )\nfn.save.data(\"pred.xg.9\")\n\ntg <- 8\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.8 <- xgbCV( train , test , tgt, MTGT, cv , ite=300 ,shri=0.11, depth=7,subsample=0.35,colsample=0.30, verbose=TRUE )\nfn.save.data(\"pred.xg.8\")\n\ntg <- 2\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.2 <- xgbCV( train , test , tgt, MTGT, cv , ite=300 ,shri=0.11, depth=7,subsample=0.35,colsample=0.30, verbose=TRUE )\nfn.save.data(\"pred.xg.2\")\n\ntg <- 4\nMTGT <- MTARGET[[tg]]\ntgt <- target[[tg]]-1\npred.xg.4 <- xgbCV( train , test , tgt, MTGT, cv , ite=300 ,shri=0.11, depth=7,subsample=0.35,colsample=0.30, verbose=TRUE )\nfn.save.data(\"pred.xg.4\")\n###########################################################################################\n\n\n\n\n#Calculate the metric for all targets separatedly and then calculate main score\n###########################################################################################\nfn.load.data(\"target\")\nfn.load.data(\"MTARGET\")\nfn.load.data(\"pred.xg.1\")\nfn.load.data(\"pred.xg.2\")\nfn.load.data(\"pred.xg.3\")\nfn.load.data(\"pred.xg.4\")\nfn.load.data(\"pred.xg.5\")\nfn.load.data(\"pred.xg.6\")\nfn.load.data(\"pred.xg.7\")\nfn.load.data(\"pred.xg.8\")\nfn.load.data(\"pred.xg.9\")\n\n#Score for each target\nnllmc(MTARGET[[1]],pred.xg.1$train)#\nnllmc(MTARGET[[2]],pred.xg.2$train)#\nnllmc(MTARGET[[3]],pred.xg.3$train)#\nnllmc(MTARGET[[4]],pred.xg.4$train)#\nnllmc(MTARGET[[5]],pred.xg.5$train)#\nnllmc(MTARGET[[6]],pred.xg.6$train)#\nnllmc(MTARGET[[7]],pred.xg.7$train)#\nnllmc(MTARGET[[8]],pred.xg.8$train)#\nnllmc(MTARGET[[9]],pred.xg.9$train)#\n\n#Main Score \nllmc(MTARGET[[1]],pred.xg.1$train)+\n  llmc(MTARGET[[2]],pred.xg.2$train)+\n  llmc(MTARGET[[3]],pred.xg.3$train)+\n  llmc(MTARGET[[4]],pred.xg.4$train)+\n  llmc(MTARGET[[5]],pred.xg.5$train)+\n  llmc(MTARGET[[6]],pred.xg.6$train)+\n  llmc(MTARGET[[7]],pred.xg.7$train)+\n  llmc(MTARGET[[8]],pred.xg.8$train)+\n  llmc(MTARGET[[9]],pred.xg.9$train)\n\n\n#Hit rate for each target\nmean( max.col(pred.xg.1$train)==target[[1]]  )#\nmean( max.col(pred.xg.2$train)==target[[2]]  )#\nmean( max.col(pred.xg.3$train)==target[[3]]  )#\nmean( max.col(pred.xg.4$train)==target[[4]]  )#\nmean( max.col(pred.xg.5$train)==target[[5]]  )#\nmean( max.col(pred.xg.6$train)==target[[6]]  )#\nmean( max.col(pred.xg.7$train)==target[[7]]  )#\nmean( max.col(pred.xg.8$train)==target[[8]]  )#\nmean( max.col(pred.xg.9$train)==target[[9]]  )#\n\n##############################################################################################\n\n\n\n\n\n\n\n\n",
    "created" : 1423755405230.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2414048071",
    "id" : "AE2503C2",
    "lastKnownWriteTime" : 1422561920,
    "path" : "~/Downloads/titericz/code/train2.R",
    "project_path" : "train2.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}